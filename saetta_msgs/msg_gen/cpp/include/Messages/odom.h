/* Auto-generated by genmsg_cpp for file /home/erupter/Apps/ROS/Saetta/Messages/msg/odom.msg */
#ifndef MESSAGES_MESSAGE_ODOM_H
#define MESSAGES_MESSAGE_ODOM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Messages
{
template <class ContainerAllocator>
struct odom_ {
  typedef odom_<ContainerAllocator> Type;

  odom_()
  : x_position(0.0)
  , y_position(0.0)
  , angle(0.0)
  {
  }

  odom_(const ContainerAllocator& _alloc)
  : x_position(0.0)
  , y_position(0.0)
  , angle(0.0)
  {
  }

  typedef float _x_position_type;
  float x_position;

  typedef float _y_position_type;
  float y_position;

  typedef float _angle_type;
  float angle;


  typedef boost::shared_ptr< ::Messages::odom_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Messages::odom_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct odom
typedef  ::Messages::odom_<std::allocator<void> > odom;

typedef boost::shared_ptr< ::Messages::odom> odomPtr;
typedef boost::shared_ptr< ::Messages::odom const> odomConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Messages::odom_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Messages::odom_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Messages

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Messages::odom_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Messages::odom_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Messages::odom_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aa394c33a3c739445971620289a118d3";
  }

  static const char* value(const  ::Messages::odom_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xaa394c33a3c73944ULL;
  static const uint64_t static_value2 = 0x5971620289a118d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::Messages::odom_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Messages/odom";
  }

  static const char* value(const  ::Messages::odom_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Messages::odom_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 x_position\n\
float32 y_position\n\
float32 angle\n\
\n\
";
  }

  static const char* value(const  ::Messages::odom_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Messages::odom_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Messages::odom_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x_position);
    stream.next(m.y_position);
    stream.next(m.angle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct odom_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Messages::odom_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Messages::odom_<ContainerAllocator> & v) 
  {
    s << indent << "x_position: ";
    Printer<float>::stream(s, indent + "  ", v.x_position);
    s << indent << "y_position: ";
    Printer<float>::stream(s, indent + "  ", v.y_position);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MESSAGES_MESSAGE_ODOM_H

