/* Auto-generated by genmsg_cpp for file /home/erupter/Apps/ROS/Saetta/Messages/msg/cmd_vel.msg */
#ifndef MESSAGES_MESSAGE_CMD_VEL_H
#define MESSAGES_MESSAGE_CMD_VEL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Messages
{
template <class ContainerAllocator>
struct cmd_vel_ {
  typedef cmd_vel_<ContainerAllocator> Type;

  cmd_vel_()
  : linear(0.0)
  , angular(0.0)
  {
  }

  cmd_vel_(const ContainerAllocator& _alloc)
  : linear(0.0)
  , angular(0.0)
  {
  }

  typedef float _linear_type;
  float linear;

  typedef float _angular_type;
  float angular;


  typedef boost::shared_ptr< ::Messages::cmd_vel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Messages::cmd_vel_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct cmd_vel
typedef  ::Messages::cmd_vel_<std::allocator<void> > cmd_vel;

typedef boost::shared_ptr< ::Messages::cmd_vel> cmd_velPtr;
typedef boost::shared_ptr< ::Messages::cmd_vel const> cmd_velConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Messages::cmd_vel_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Messages::cmd_vel_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Messages

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Messages::cmd_vel_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Messages::cmd_vel_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Messages::cmd_vel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9d5c2dcd348ac8f76ce2a4307bd63a13";
  }

  static const char* value(const  ::Messages::cmd_vel_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9d5c2dcd348ac8f7ULL;
  static const uint64_t static_value2 = 0x6ce2a4307bd63a13ULL;
};

template<class ContainerAllocator>
struct DataType< ::Messages::cmd_vel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Messages/cmd_vel";
  }

  static const char* value(const  ::Messages::cmd_vel_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Messages::cmd_vel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 linear\n\
float32 angular\n\
\n\
";
  }

  static const char* value(const  ::Messages::cmd_vel_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Messages::cmd_vel_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Messages::cmd_vel_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.linear);
    stream.next(m.angular);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct cmd_vel_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Messages::cmd_vel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Messages::cmd_vel_<ContainerAllocator> & v) 
  {
    s << indent << "linear: ";
    Printer<float>::stream(s, indent + "  ", v.linear);
    s << indent << "angular: ";
    Printer<float>::stream(s, indent + "  ", v.angular);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MESSAGES_MESSAGE_CMD_VEL_H

