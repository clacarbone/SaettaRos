// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: timetests.proto

#ifndef PROTOBUF_timetests_2eproto__INCLUDED
#define PROTOBUF_timetests_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace TimeTests {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_timetests_2eproto();
void protobuf_AssignDesc_timetests_2eproto();
void protobuf_ShutdownFile_timetests_2eproto();

class Machine;
class Traceroute;

// ===================================================================

class Machine : public ::google::protobuf::Message {
 public:
  Machine();
  virtual ~Machine();
  
  Machine(const Machine& from);
  
  inline Machine& operator=(const Machine& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Machine& default_instance();
  
  void Swap(Machine* other);
  
  // implements Message ----------------------------------------------
  
  Machine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Machine& from);
  void MergeFrom(const Machine& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string machine_name = 1;
  inline bool has_machine_name() const;
  inline void clear_machine_name();
  static const int kMachineNameFieldNumber = 1;
  inline const ::std::string& machine_name() const;
  inline void set_machine_name(const ::std::string& value);
  inline void set_machine_name(const char* value);
  inline void set_machine_name(const char* value, size_t size);
  inline ::std::string* mutable_machine_name();
  inline ::std::string* release_machine_name();
  
  // required float ntp_delay = 2;
  inline bool has_ntp_delay() const;
  inline void clear_ntp_delay();
  static const int kNtpDelayFieldNumber = 2;
  inline float ntp_delay() const;
  inline void set_ntp_delay(float value);
  
  // required float ntp_offset = 3;
  inline bool has_ntp_offset() const;
  inline void clear_ntp_offset();
  static const int kNtpOffsetFieldNumber = 3;
  inline float ntp_offset() const;
  inline void set_ntp_offset(float value);
  
  // required float ntp_jitter = 4;
  inline bool has_ntp_jitter() const;
  inline void clear_ntp_jitter();
  static const int kNtpJitterFieldNumber = 4;
  inline float ntp_jitter() const;
  inline void set_ntp_jitter(float value);
  
  // required uint64 timestamp = 5;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:TimeTests.Machine)
 private:
  inline void set_has_machine_name();
  inline void clear_has_machine_name();
  inline void set_has_ntp_delay();
  inline void clear_has_ntp_delay();
  inline void set_has_ntp_offset();
  inline void clear_has_ntp_offset();
  inline void set_has_ntp_jitter();
  inline void clear_has_ntp_jitter();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* machine_name_;
  float ntp_delay_;
  float ntp_offset_;
  ::google::protobuf::uint64 timestamp_;
  float ntp_jitter_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_timetests_2eproto();
  friend void protobuf_AssignDesc_timetests_2eproto();
  friend void protobuf_ShutdownFile_timetests_2eproto();
  
  void InitAsDefaultInstance();
  static Machine* default_instance_;
};
// -------------------------------------------------------------------

class Traceroute : public ::google::protobuf::Message {
 public:
  Traceroute();
  virtual ~Traceroute();
  
  Traceroute(const Traceroute& from);
  
  inline Traceroute& operator=(const Traceroute& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Traceroute& default_instance();
  
  void Swap(Traceroute* other);
  
  // implements Message ----------------------------------------------
  
  Traceroute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Traceroute& from);
  void MergeFrom(const Traceroute& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::std::string& header() const;
  inline void set_header(const ::std::string& value);
  inline void set_header(const char* value);
  inline void set_header(const char* value, size_t size);
  inline ::std::string* mutable_header();
  inline ::std::string* release_header();
  
  // repeated .TimeTests.Machine machine = 2;
  inline int machine_size() const;
  inline void clear_machine();
  static const int kMachineFieldNumber = 2;
  inline const ::TimeTests::Machine& machine(int index) const;
  inline ::TimeTests::Machine* mutable_machine(int index);
  inline ::TimeTests::Machine* add_machine();
  inline const ::google::protobuf::RepeatedPtrField< ::TimeTests::Machine >&
      machine() const;
  inline ::google::protobuf::RepeatedPtrField< ::TimeTests::Machine >*
      mutable_machine();
  
  // @@protoc_insertion_point(class_scope:TimeTests.Traceroute)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* header_;
  ::google::protobuf::RepeatedPtrField< ::TimeTests::Machine > machine_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_timetests_2eproto();
  friend void protobuf_AssignDesc_timetests_2eproto();
  friend void protobuf_ShutdownFile_timetests_2eproto();
  
  void InitAsDefaultInstance();
  static Traceroute* default_instance_;
};
// ===================================================================


// ===================================================================

// Machine

// required string machine_name = 1;
inline bool Machine::has_machine_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Machine::set_has_machine_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Machine::clear_has_machine_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Machine::clear_machine_name() {
  if (machine_name_ != &::google::protobuf::internal::kEmptyString) {
    machine_name_->clear();
  }
  clear_has_machine_name();
}
inline const ::std::string& Machine::machine_name() const {
  return *machine_name_;
}
inline void Machine::set_machine_name(const ::std::string& value) {
  set_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    machine_name_ = new ::std::string;
  }
  machine_name_->assign(value);
}
inline void Machine::set_machine_name(const char* value) {
  set_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    machine_name_ = new ::std::string;
  }
  machine_name_->assign(value);
}
inline void Machine::set_machine_name(const char* value, size_t size) {
  set_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    machine_name_ = new ::std::string;
  }
  machine_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Machine::mutable_machine_name() {
  set_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    machine_name_ = new ::std::string;
  }
  return machine_name_;
}
inline ::std::string* Machine::release_machine_name() {
  clear_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = machine_name_;
    machine_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required float ntp_delay = 2;
inline bool Machine::has_ntp_delay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Machine::set_has_ntp_delay() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Machine::clear_has_ntp_delay() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Machine::clear_ntp_delay() {
  ntp_delay_ = 0;
  clear_has_ntp_delay();
}
inline float Machine::ntp_delay() const {
  return ntp_delay_;
}
inline void Machine::set_ntp_delay(float value) {
  set_has_ntp_delay();
  ntp_delay_ = value;
}

// required float ntp_offset = 3;
inline bool Machine::has_ntp_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Machine::set_has_ntp_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Machine::clear_has_ntp_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Machine::clear_ntp_offset() {
  ntp_offset_ = 0;
  clear_has_ntp_offset();
}
inline float Machine::ntp_offset() const {
  return ntp_offset_;
}
inline void Machine::set_ntp_offset(float value) {
  set_has_ntp_offset();
  ntp_offset_ = value;
}

// required float ntp_jitter = 4;
inline bool Machine::has_ntp_jitter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Machine::set_has_ntp_jitter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Machine::clear_has_ntp_jitter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Machine::clear_ntp_jitter() {
  ntp_jitter_ = 0;
  clear_has_ntp_jitter();
}
inline float Machine::ntp_jitter() const {
  return ntp_jitter_;
}
inline void Machine::set_ntp_jitter(float value) {
  set_has_ntp_jitter();
  ntp_jitter_ = value;
}

// required uint64 timestamp = 5;
inline bool Machine::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Machine::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Machine::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Machine::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 Machine::timestamp() const {
  return timestamp_;
}
inline void Machine::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// -------------------------------------------------------------------

// Traceroute

// required string header = 1;
inline bool Traceroute::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Traceroute::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Traceroute::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Traceroute::clear_header() {
  if (header_ != &::google::protobuf::internal::kEmptyString) {
    header_->clear();
  }
  clear_has_header();
}
inline const ::std::string& Traceroute::header() const {
  return *header_;
}
inline void Traceroute::set_header(const ::std::string& value) {
  set_has_header();
  if (header_ == &::google::protobuf::internal::kEmptyString) {
    header_ = new ::std::string;
  }
  header_->assign(value);
}
inline void Traceroute::set_header(const char* value) {
  set_has_header();
  if (header_ == &::google::protobuf::internal::kEmptyString) {
    header_ = new ::std::string;
  }
  header_->assign(value);
}
inline void Traceroute::set_header(const char* value, size_t size) {
  set_has_header();
  if (header_ == &::google::protobuf::internal::kEmptyString) {
    header_ = new ::std::string;
  }
  header_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Traceroute::mutable_header() {
  set_has_header();
  if (header_ == &::google::protobuf::internal::kEmptyString) {
    header_ = new ::std::string;
  }
  return header_;
}
inline ::std::string* Traceroute::release_header() {
  clear_has_header();
  if (header_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = header_;
    header_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .TimeTests.Machine machine = 2;
inline int Traceroute::machine_size() const {
  return machine_.size();
}
inline void Traceroute::clear_machine() {
  machine_.Clear();
}
inline const ::TimeTests::Machine& Traceroute::machine(int index) const {
  return machine_.Get(index);
}
inline ::TimeTests::Machine* Traceroute::mutable_machine(int index) {
  return machine_.Mutable(index);
}
inline ::TimeTests::Machine* Traceroute::add_machine() {
  return machine_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TimeTests::Machine >&
Traceroute::machine() const {
  return machine_;
}
inline ::google::protobuf::RepeatedPtrField< ::TimeTests::Machine >*
Traceroute::mutable_machine() {
  return &machine_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TimeTests

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_timetests_2eproto__INCLUDED
